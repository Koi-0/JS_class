// 배열

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 1. 생성

// 1-1. 기본 생성
// let fruits = ["사과", "바나나", "오렌지"];

// 1-2. 크기 지정
// let number = new Array(5);

// console.log(fruits.length);
// console.log(number.length);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 2. 요소 접근
// console.log(fruits[0]);
// console.log(fruits[1]);
// console.log(fruits[2]);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 3. 배열 메소드

// 3-1. push : 마지막에 추가됨
// let fruits = ["사과", "바나나"];
// console.log("1 => ", fruits);

// fruits.push("오렌지");
// console.log("2 => ", fruits);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 3-2. pop : 마지막 꺼 삭제됨
// let fruits = ["사과", "바나나"];
// console.log("1 => ", fruits);

// fruits.pop();
// console.log("2 => ", fruits);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 3-3. shift : 맨 앞에 꺼 삭제됨
// let fruits = ["사과", "바나나", "키위"];
// console.log("1 => ", fruits);

// fruits.shift();
// console.log("2 => ", fruits);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 3-4. unshift : 맨 앞에 추가됨
// let fruits = ["사과", "바나나", "키위"];
// console.log("1 => ", fruits);

// fruits.unshift("포도");
// console.log("2 => ", fruits);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 3-5. splice
// let fruits = ["사과", "바나나", "키위"];
// console.log("1 => ", fruits);

// fruits.splice(1, 1, "포도");
// console.log("2 => ", fruits);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 3-6. slice
// let fruits = ["사과", "바나나", "키위"];
// console.log("1 => ", fruits);

// let sliceFruits = fruits.slice(1, 3);
// console.log("2 => ", sliceFruits);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 4. forEach, map, fillter, find

// 4-1. forEach
// let numbers = [5, 2, 3, 1, 4];

// 매개변수 자리에 함수를 넣는 것 : 콜백 함수
// numbers.forEach(function (item) {
//     console.log("item입니다 => " + item);
// });

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 4-2. map : 기존에 있던 배열을 가공해서 새로운 배열을 생산하는 명령어
// 항상 기존 배열의 길이만큼 return된다.
// 꼭 return이 필요함 !!
// let newNumbers = numbers.map(function (item) {
//     return item * 2;
// });

// console.log(newNumbers);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 4-3. fillter : 조건에 해당되는 값만 return하는 명령어
// 꼭 return이 필요함 !!
// let filteredNumbers = numbers.filter(function (item) {
//     //   return item === 5;
//     //   return item !== 5;
//     return item > 3;
// });

// console.log(filteredNumbers);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 4-4. find : 조건에 해당되는 값 중에서 첫 번째 값만 반환하는 명령어
// 꼭 return이 필요함 !!
// let result = numbers.find(function (item) {
//     return item > 3;
// });

// console.log(result);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
