// 단축 속성명 : property shorthand

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// const name = "abc";
// const age = "30";

// key - value;
// const obj = { name, age }; // key - value 명이 같을 경우 생략 가능

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 전개 구문 = spread operator
// destructuring과 함께 가장 많이 사용되는 ES6 문법 중 하나!

// (1) 배열
// let arr = [1, 2, 3];
// console.log(arr); // 출력값 : [ 1, 2, 3 ]
// console.log(...arr); // 출력값 : 1, 2, 3

// let newArr = [...arr, 4];
// console.log(newArr); // 출력값 : [ 1, 2, 3, 4 ]

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// (2) 객체
// let user1 = {
//     name: "abc",
//     age: 30,
// };

// let user2 = { ...user1 };

// console.log(user1); // 출력값 : { name: 'abc', age: 30 }
// console.log(user2); // 출력값 : { name: 'abc', age: 30 }

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 나머지 매개변수(rest parameter)
// function exampleFunc(a, b, c, ...args) {
//     console.log(a, b, c); // 출력값 : 1, 2, 3
//     console.log(...args); // 출력값 : 4, 5, 6, 7 // ... 있으면 [] 없음
//     console.log(args); // 출력값 : [ 4, 5, 6, 7 ] // ... 없으면 [] 있음
// }

// exampleFunc(1, 2, 3, 4, 5, 6, 7);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //

// 템플릿 리터럴(Template Literal)
// const testValue = "안녕하세요!";

// console.log(`hello World ${testValue}`);
// console.log(`
//     Hello
//         My name is JavaScript!!

//         Nice to meet you!!
// `);

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
